#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

// Constantes
#define MAX_LINE 1024
#define MAX_ARGS 64
#define DELIM " \t\r\n\a"

// Fonction pour lire une ligne de l'entrée standard
char *read_line() {
    char *line = malloc(MAX_LINE);
    if (!line) {
        perror("malloc");
        exit(EXIT_FAILURE);
    }

    if (fgets(line, MAX_LINE, stdin) == NULL) {
        free(line);
        return NULL;
    }
    return line;
}

// Fonction pour découper la ligne en tokens
char **split_line(char *line) {
    char **tokens = malloc(MAX_ARGS * sizeof(char *));
    char *token;
    int position = 0;

    if (!tokens) {
        perror("malloc");
        exit(EXIT_FAILURE);
    }

    token = strtok(line, DELIM);
    while (token != NULL) {
        tokens[position++] = token;
        token = strtok(NULL, DELIM);
    }
    tokens[position] = NULL;
    return tokens;
}

// Implémentation des commandes internes
int builtin_cd(char **args) {
    if (args[1] == NULL) {
        fprintf(stderr, "minishell: expected argument to \"cd\"\n");
    } else {
        if (chdir(args[1]) != 0) {
            perror("minishell");
        }
    }
    return 1;
}

int builtin_exit(char **args) {
    return 0;
}

// Lancer une commande externe
int launch(char **args) {
    pid_t pid, wpid;
    int status;

    pid = fork();
    if (pid == 0) {
        // Processus enfant
        if (execvp(args[0], args) == -1) {
            perror("minishell");
        }
        exit(EXIT_FAILURE);
    } else if (pid < 0) {
        perror("minishell");
    } else {
        // Processus parent
        do {
            wpid = waitpid(pid, &status, WUNTRACED);
        } while (!WIFEXITED(status) && !WIFSIGNALED(status));
    }
    return 1;
}

// Exécuter la commande : builtin ou externe
int execute(char **args) {
    if (args[0] == NULL) {
        // Commande vide
        return 1;
    }

    // Commandes internes
    if (strcmp(args[0], "cd") == 0) {
        return builtin_cd(args);
    } else if (strcmp(args[0], "exit") == 0) {
        return builtin_exit(args);
    }

    // Commandes externes
    return launch(args);
}

// Boucle REPL
void minishell_loop() {
    char *line;
    char **args;
    int status;

    do {
        printf("minishell> ");
        line = read_line();
        if (line == NULL) {
            break; // fin de fichier (Ctrl+D)
        }

        args = split_line(line);
        status = execute(args);

        free(line);
        free(args);
    } while (status);
}

int main() {
    // Intro
    printf("Bienvenue dans minishell ! Tapez \"exit\" pour quitter.\n");
    // Lancer la boucle principale
    minishell_loop();
    return 0;
}
